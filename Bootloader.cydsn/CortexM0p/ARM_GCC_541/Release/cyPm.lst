ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"cyPm.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CySysPmSleep,"ax",%progbits
  20              		.align	1
  21              		.global	CySysPmSleep
  22              		.code	16
  23              		.thumb_func
  24              		.type	CySysPmSleep, %function
  25              	CySysPmSleep:
  26              	.LFB1:
  27              		.file 1 "Generated_Source\\PSoC4\\cyPm.c"
   1:Generated_Source\PSoC4/cyPm.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/cyPm.c **** * \file cyPm.c
   3:Generated_Source\PSoC4/cyPm.c **** * \version 5.60
   4:Generated_Source\PSoC4/cyPm.c **** *
   5:Generated_Source\PSoC4/cyPm.c **** * \brief Provides an API for the power management.
   6:Generated_Source\PSoC4/cyPm.c **** *
   7:Generated_Source\PSoC4/cyPm.c **** * \note Documentation of the API's in this file is located in the System
   8:Generated_Source\PSoC4/cyPm.c **** * Reference Guide provided with PSoC Creator.
   9:Generated_Source\PSoC4/cyPm.c **** *
  10:Generated_Source\PSoC4/cyPm.c **** ********************************************************************************
  11:Generated_Source\PSoC4/cyPm.c **** * \copyright
  12:Generated_Source\PSoC4/cyPm.c **** * Copyright 2011-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/cyPm.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/cyPm.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/cyPm.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/cyPm.c **** 
  18:Generated_Source\PSoC4/cyPm.c **** #include "cyPm.h"
  19:Generated_Source\PSoC4/cyPm.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/cyPm.c **** 
  21:Generated_Source\PSoC4/cyPm.c **** 
  22:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  23:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmSleep
  24:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  25:Generated_Source\PSoC4/cyPm.c **** *
  26:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Sleep state. This is a CPU-centric power mode.
  27:Generated_Source\PSoC4/cyPm.c **** * It means that the CPU has indicated that it is in the sleep mode and
  28:Generated_Source\PSoC4/cyPm.c **** * its main clock can be removed. It is identical to Active from a peripheral
  29:Generated_Source\PSoC4/cyPm.c **** * point of view. Any enabled interrupts can cause wakeup from the Sleep mode.
  30:Generated_Source\PSoC4/cyPm.c **** *
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 2


  31:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  32:Generated_Source\PSoC4/cyPm.c **** void CySysPmSleep(void)
  33:Generated_Source\PSoC4/cyPm.c **** {
  28              		.loc 1 33 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  34:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  35:Generated_Source\PSoC4/cyPm.c **** 
  36:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  36              		.loc 1 36 0
  37 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  38              	.LVL0:
  37:Generated_Source\PSoC4/cyPm.c **** 
  38:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters Sleep mode upon execution of WFI */
  39:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG &= (uint32) (~CY_PM_CPU_SCR_SLEEPDEEP);
  39              		.loc 1 39 0
  40 0006 0421     		movs	r1, #4
  41 0008 034A     		ldr	r2, .L2
  42 000a 1368     		ldr	r3, [r2]
  43 000c 8B43     		bics	r3, r1
  44 000e 1360     		str	r3, [r2]
  40:Generated_Source\PSoC4/cyPm.c **** 
  41:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  42:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  45              		.loc 1 42 0
  46              		.syntax divided
  47              	@ 42 "Generated_Source\PSoC4\cyPm.c" 1
  48 0010 30BF     		WFI 
  49              	
  50              	@ 0 "" 2
  43:Generated_Source\PSoC4/cyPm.c **** 
  44:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
  51              		.loc 1 44 0
  52              		.thumb
  53              		.syntax unified
  54 0012 FFF7FEFF 		bl	CyExitCriticalSection
  55              	.LVL1:
  45:Generated_Source\PSoC4/cyPm.c **** }
  56              		.loc 1 45 0
  57              		@ sp needed
  58 0016 10BD     		pop	{r4, pc}
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0018 10ED00E0 		.word	-536810224
  63              		.cfi_endproc
  64              	.LFE1:
  65              		.size	CySysPmSleep, .-CySysPmSleep
  66              		.section	.text.CySysPmDeepSleep,"ax",%progbits
  67              		.align	1
  68              		.global	CySysPmDeepSleep
  69              		.code	16
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 3


  70              		.thumb_func
  71              		.type	CySysPmDeepSleep, %function
  72              	CySysPmDeepSleep:
  73              	.LFB2:
  46:Generated_Source\PSoC4/cyPm.c **** 
  47:Generated_Source\PSoC4/cyPm.c **** 
  48:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  49:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmDeepSleep
  50:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  51:Generated_Source\PSoC4/cyPm.c **** *
  52:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Deep Sleep state. If the firmware attempts to enter
  53:Generated_Source\PSoC4/cyPm.c **** * this mode before the system is ready (that is, when
  54:Generated_Source\PSoC4/cyPm.c **** * PWR_CONTROL.LPM_READY = 0), then the device will go into the Sleep mode
  55:Generated_Source\PSoC4/cyPm.c **** * instead and automatically enter the originally intended mode when the
  56:Generated_Source\PSoC4/cyPm.c **** * holdoff expires.
  57:Generated_Source\PSoC4/cyPm.c **** *
  58:Generated_Source\PSoC4/cyPm.c **** * The wakeup occurs when an interrupt is received from a DeepSleep or
  59:Generated_Source\PSoC4/cyPm.c **** * Hibernate peripheral. For more details, see a corresponding
  60:Generated_Source\PSoC4/cyPm.c **** * peripheral's datasheet.
  61:Generated_Source\PSoC4/cyPm.c **** *
  62:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/cyPm.c **** void CySysPmDeepSleep(void)
  64:Generated_Source\PSoC4/cyPm.c **** {
  74              		.loc 1 64 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78 0000 10B5     		push	{r4, lr}
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 4, -8
  81              		.cfi_offset 14, -4
  65:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  66:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  67:Generated_Source\PSoC4/cyPm.c ****         volatile uint32 clkSelectReg;
  68:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  69:Generated_Source\PSoC4/cyPm.c **** 
  70:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  82              		.loc 1 70 0
  83 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  84              	.LVL2:
  71:Generated_Source\PSoC4/cyPm.c **** 
  72:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  73:Generated_Source\PSoC4/cyPm.c ****         /* Device enters DeepSleep mode when CPU asserts SLEEPDEEP signal */
  74:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG &= (uint32) (~CY_PM_PWR_CONTROL_HIBERNATE);
  75:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  76:Generated_Source\PSoC4/cyPm.c **** 
  77:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
  78:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG |= CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS;
  79:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
  80:Generated_Source\PSoC4/cyPm.c **** 
  81:Generated_Source\PSoC4/cyPm.c ****     /* Adjust delay to wait for references to settle on wakeup from Deep Sleep */
  82:Generated_Source\PSoC4/cyPm.c ****     CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_DPSLP_KEY_DELAY_REG;
  83:Generated_Source\PSoC4/cyPm.c **** 
  84:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
  85:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
  85              		.loc 1 85 0
  86 0006 0421     		movs	r1, #4
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 4


  82:Generated_Source\PSoC4/cyPm.c **** 
  87              		.loc 1 82 0
  88 0008 064B     		ldr	r3, .L5
  89 000a 074A     		ldr	r2, .L5+4
  90 000c 1B88     		ldrh	r3, [r3]
  91 000e 9BB2     		uxth	r3, r3
  92 0010 1360     		str	r3, [r2]
  93              		.loc 1 85 0
  94 0012 064A     		ldr	r2, .L5+8
  95 0014 1368     		ldr	r3, [r2]
  96 0016 0B43     		orrs	r3, r1
  97 0018 1360     		str	r3, [r2]
  86:Generated_Source\PSoC4/cyPm.c **** 
  87:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  88:Generated_Source\PSoC4/cyPm.c ****         /* Preserve system clock configuration and
  89:Generated_Source\PSoC4/cyPm.c ****         * reduce sysclk to <=12 MHz (Cypress ID #158710, #179888).
  90:Generated_Source\PSoC4/cyPm.c ****         */
  91:Generated_Source\PSoC4/cyPm.c ****         clkSelectReg = CY_SYS_CLK_SELECT_REG;
  92:Generated_Source\PSoC4/cyPm.c ****         CySysClkWriteSysclkDiv(CY_SYS_CLK_SYSCLK_DIV4);
  93:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  94:Generated_Source\PSoC4/cyPm.c **** 
  95:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  96:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  98              		.loc 1 96 0
  99              		.syntax divided
 100              	@ 96 "Generated_Source\PSoC4\cyPm.c" 1
 101 001a 30BF     		WFI 
 102              	
 103              	@ 0 "" 2
  97:Generated_Source\PSoC4/cyPm.c **** 
  98:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  99:Generated_Source\PSoC4/cyPm.c ****         /* Restore system clock configuration */
 100:Generated_Source\PSoC4/cyPm.c ****         CY_SYS_CLK_SELECT_REG = clkSelectReg;
 101:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
 102:Generated_Source\PSoC4/cyPm.c **** 
 103:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
 104:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG &= (uint32) (~CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS);
 105:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
 106:Generated_Source\PSoC4/cyPm.c **** 
 107:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
 104              		.loc 1 107 0
 105              		.thumb
 106              		.syntax unified
 107 001c FFF7FEFF 		bl	CyExitCriticalSection
 108              	.LVL3:
 108:Generated_Source\PSoC4/cyPm.c **** }
 109              		.loc 1 108 0
 110              		@ sp needed
 111 0020 10BD     		pop	{r4, pc}
 112              	.L6:
 113 0022 C046     		.align	2
 114              	.L5:
 115 0024 52F1FF0F 		.word	268431698
 116 0028 04000340 		.word	1073938436
 117 002c 10ED00E0 		.word	-536810224
 118              		.cfi_endproc
 119              	.LFE2:
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 5


 120              		.size	CySysPmDeepSleep, .-CySysPmDeepSleep
 121              		.section	.text.CySysPmSetWakeupHoldoff,"ax",%progbits
 122              		.align	1
 123              		.global	CySysPmSetWakeupHoldoff
 124              		.code	16
 125              		.thumb_func
 126              		.type	CySysPmSetWakeupHoldoff, %function
 127              	CySysPmSetWakeupHoldoff:
 128              	.LFB3:
 109:Generated_Source\PSoC4/cyPm.c **** 
 110:Generated_Source\PSoC4/cyPm.c **** 
 111:Generated_Source\PSoC4/cyPm.c **** #if(CY_IP_SRSSV2)
 112:Generated_Source\PSoC4/cyPm.c **** 
 113:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 114:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmHibernate
 115:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 116:Generated_Source\PSoC4/cyPm.c ****     *
 117:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Hibernate state. Only SRAM and UDBs are retained;
 118:Generated_Source\PSoC4/cyPm.c ****     * most internal supplies are off. Wakeup is possible from a pin or a hibernate
 119:Generated_Source\PSoC4/cyPm.c ****     * comparator only.
 120:Generated_Source\PSoC4/cyPm.c ****     *
 121:Generated_Source\PSoC4/cyPm.c ****     * It is expected that the firmware has already frozen the IO-Cells using
 122:Generated_Source\PSoC4/cyPm.c ****     * CySysPmFreezeIo() function before the call to this function. If this is
 123:Generated_Source\PSoC4/cyPm.c ****     * omitted, the IO-cells will be frozen in the same way as they are
 124:Generated_Source\PSoC4/cyPm.c ****     * in the Active to Deep Sleep transition, but will lose their state on wake up
 125:Generated_Source\PSoC4/cyPm.c ****     * (because of the reset occurring at that time).
 126:Generated_Source\PSoC4/cyPm.c ****     *
 127:Generated_Source\PSoC4/cyPm.c ****     * Because all the CPU state is lost, the CPU will start up at the reset vector.
 128:Generated_Source\PSoC4/cyPm.c ****     * To save the firmware state through the Hibernate low power mode, a
 129:Generated_Source\PSoC4/cyPm.c ****     * corresponding variable should be defined with CY_NOINIT attribute. It
 130:Generated_Source\PSoC4/cyPm.c ****     * prevents data from being initialized to zero on startup. The interrupt
 131:Generated_Source\PSoC4/cyPm.c ****     * cause of the hibernate peripheral is retained, such that it can be either
 132:Generated_Source\PSoC4/cyPm.c ****     * read by the firmware or cause an interrupt after the firmware has booted and
 133:Generated_Source\PSoC4/cyPm.c ****     * enabled the corresponding interrupt. To distinguish the wakeup from
 134:Generated_Source\PSoC4/cyPm.c ****     * the Hibernate mode and the general Reset event, the
 135:Generated_Source\PSoC4/cyPm.c ****     * \ref CySysPmGetResetReason() function could be used.
 136:Generated_Source\PSoC4/cyPm.c ****     *
 137:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 138:Generated_Source\PSoC4/cyPm.c ****     void CySysPmHibernate(void)
 139:Generated_Source\PSoC4/cyPm.c ****     {
 140:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 141:Generated_Source\PSoC4/cyPm.c **** 
 142:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 143:Generated_Source\PSoC4/cyPm.c **** 
 144:Generated_Source\PSoC4/cyPm.c ****         #if (CY_IP_HOBTO_DEVICE)
 145:Generated_Source\PSoC4/cyPm.c ****             /* Disable input buffers for all ports */
 146:Generated_Source\PSoC4/cyPm.c ****             CySysPmHibPinsDisableInputBuf();
 147:Generated_Source\PSoC4/cyPm.c ****         #endif /* (CY_IP_HOBTO_DEVICE) */
 148:Generated_Source\PSoC4/cyPm.c **** 
 149:Generated_Source\PSoC4/cyPm.c ****         /* Device enters Hibernate mode when CPU asserts SLEEPDEEP signal */
 150:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG |= CY_PM_PWR_CONTROL_HIBERNATE;
 151:Generated_Source\PSoC4/cyPm.c **** 
 152:Generated_Source\PSoC4/cyPm.c ****         /* Adjust delay to wait for references to settle on wakeup from hibernate */
 153:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_HIB_KEY_DELAY_REG;
 154:Generated_Source\PSoC4/cyPm.c **** 
 155:Generated_Source\PSoC4/cyPm.c ****         /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
 156:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 6


 157:Generated_Source\PSoC4/cyPm.c **** 
 158:Generated_Source\PSoC4/cyPm.c ****         /* Save token that will retain through a STOP/WAKEUP sequence
 159:Generated_Source\PSoC4/cyPm.c ****          * thus could be used by CySysPmGetResetReason() to differentiate
 160:Generated_Source\PSoC4/cyPm.c ****          * WAKEUP from a general RESET event.
 161:Generated_Source\PSoC4/cyPm.c ****          */
 162:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & (uint32)(~CY_PM_PWR_STOP_TOKEN_MASK)) | CY_PM_PW
 163:Generated_Source\PSoC4/cyPm.c **** 
 164:Generated_Source\PSoC4/cyPm.c ****         /* Sleep and wait for interrupt. Wakeup from Hibernate is performed
 165:Generated_Source\PSoC4/cyPm.c ****          * through RESET state, causing a normal Boot procedure to occur.
 166:Generated_Source\PSoC4/cyPm.c ****          * The WFI instruction doesn't put the core to sleep if its wake condition
 167:Generated_Source\PSoC4/cyPm.c ****          * is true when the instruction is executed.
 168:Generated_Source\PSoC4/cyPm.c ****          */
 169:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 170:Generated_Source\PSoC4/cyPm.c **** 
 171:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 172:Generated_Source\PSoC4/cyPm.c ****     }
 173:Generated_Source\PSoC4/cyPm.c **** 
 174:Generated_Source\PSoC4/cyPm.c **** 
 175:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 176:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmStop
 177:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 178:Generated_Source\PSoC4/cyPm.c ****     *
 179:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Stop state. All internal supplies are off;
 180:Generated_Source\PSoC4/cyPm.c ****     * no state is retained.
 181:Generated_Source\PSoC4/cyPm.c ****     *
 182:Generated_Source\PSoC4/cyPm.c ****     * Wakeup from Stop is performed by toggling the wakeup pin, causing
 183:Generated_Source\PSoC4/cyPm.c ****     * a normal boot procedure to occur. To configure the wakeup pin,
 184:Generated_Source\PSoC4/cyPm.c ****     * the Digital Input Pin component should be placed on the schematic,
 185:Generated_Source\PSoC4/cyPm.c ****     * assigned to the wakeup pin, and resistively pulled up or down to the inverse
 186:Generated_Source\PSoC4/cyPm.c ****     * state of the wakeup polarity. To distinguish the wakeup from the Stop mode
 187:Generated_Source\PSoC4/cyPm.c ****     * and the general Reset event, \ref CySysPmGetResetReason() function could be
 188:Generated_Source\PSoC4/cyPm.c ****     * used.  The wakeup pin is active low by default. The wakeup pin polarity
 189:Generated_Source\PSoC4/cyPm.c ****     * could be changed with the \ref CySysPmSetWakeupPolarity() function.
 190:Generated_Source\PSoC4/cyPm.c ****     *
 191:Generated_Source\PSoC4/cyPm.c ****     * This function freezes IO cells implicitly. It is not possible to enter
 192:Generated_Source\PSoC4/cyPm.c ****     * the STOP mode before freezing the IO cells. The IO cells remain frozen after
 193:Generated_Source\PSoC4/cyPm.c ****     * awake from the Stop mode until the firmware unfreezes them after booting
 194:Generated_Source\PSoC4/cyPm.c ****     * explicitly with \ref CySysPmUnfreezeIo() function call.
 195:Generated_Source\PSoC4/cyPm.c ****     *
 196:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 197:Generated_Source\PSoC4/cyPm.c ****     void CySysPmStop(void)
 198:Generated_Source\PSoC4/cyPm.c ****     {
 199:Generated_Source\PSoC4/cyPm.c ****         (void) CyEnterCriticalSection();
 200:Generated_Source\PSoC4/cyPm.c **** 
 201:Generated_Source\PSoC4/cyPm.c ****         /* Update token to indicate Stop mode transition. Preserve only polarity. */
 202:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_POLARITY) | CY_PM_PWR_STOP_TOKEN_
 203:Generated_Source\PSoC4/cyPm.c **** 
 204:Generated_Source\PSoC4/cyPm.c ****         /* Freeze IO-Cells to save IO-Cell state */
 205:Generated_Source\PSoC4/cyPm.c ****         CySysPmFreezeIo();
 206:Generated_Source\PSoC4/cyPm.c **** 
 207:Generated_Source\PSoC4/cyPm.c ****         /* Initiates transition to Stop state */
 208:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_STOP;
 209:Generated_Source\PSoC4/cyPm.c **** 
 210:Generated_Source\PSoC4/cyPm.c ****         /* Depending on the clock frequency and internal timing delays,
 211:Generated_Source\PSoC4/cyPm.c ****          * the final AHB transaction may or may not complete. To guard against
 212:Generated_Source\PSoC4/cyPm.c ****          * accidentally executing an unintended instruction, it is recommended
 213:Generated_Source\PSoC4/cyPm.c ****          * to add 2 NOP cycles after the final write to the STOP register.
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 7


 214:Generated_Source\PSoC4/cyPm.c ****          */
 215:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
 216:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
 217:Generated_Source\PSoC4/cyPm.c **** 
 218:Generated_Source\PSoC4/cyPm.c ****         /* Should never get to this WFI instruction */
 219:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 220:Generated_Source\PSoC4/cyPm.c **** 
 221:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop is performed by toggling of Wakeup pin,
 222:Generated_Source\PSoC4/cyPm.c ****          * causing a normal Boot procedure to occur. No need to exit
 223:Generated_Source\PSoC4/cyPm.c ****          * from the critical section.
 224:Generated_Source\PSoC4/cyPm.c ****          */
 225:Generated_Source\PSoC4/cyPm.c ****     }
 226:Generated_Source\PSoC4/cyPm.c **** 
 227:Generated_Source\PSoC4/cyPm.c **** 
 228:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 229:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupPolarity
 230:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 231:Generated_Source\PSoC4/cyPm.c ****     *
 232:Generated_Source\PSoC4/cyPm.c ****     * Wake up from the stop mode is performed by toggling the wakeup pin,
 233:Generated_Source\PSoC4/cyPm.c ****     * causing a normal boot procedure to occur. This function assigns
 234:Generated_Source\PSoC4/cyPm.c ****     * the wakeup pin active level. Setting the wakeup pin to this level will cause
 235:Generated_Source\PSoC4/cyPm.c ****     * the wakeup from stop mode. The wakeup pin is active low by default.
 236:Generated_Source\PSoC4/cyPm.c ****     *
 237:Generated_Source\PSoC4/cyPm.c ****     * \param polarity
 238:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_LOW Logical zero will wakeup the chip
 239:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_HIGH Logical one will wakeup the chip
 240:Generated_Source\PSoC4/cyPm.c ****     *
 241:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 242:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupPolarity(uint32 polarity)
 243:Generated_Source\PSoC4/cyPm.c ****     {
 244:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 245:Generated_Source\PSoC4/cyPm.c **** 
 246:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 247:Generated_Source\PSoC4/cyPm.c **** 
 248:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_STOP_WAKEUP_ACTIVE_LOW != polarity) ?
 249:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_POLARITY) :
 250:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (uint32) (~CY_PM_PWR_STOP_POLARITY));
 251:Generated_Source\PSoC4/cyPm.c **** 
 252:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 253:Generated_Source\PSoC4/cyPm.c ****     }
 254:Generated_Source\PSoC4/cyPm.c **** 
 255:Generated_Source\PSoC4/cyPm.c **** 
 256:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 257:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmGetResetReason
 258:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 259:Generated_Source\PSoC4/cyPm.c ****     *
 260:Generated_Source\PSoC4/cyPm.c ****     * Retrieves the last reset reason - transition from OFF/XRES/STOP/HIBERNATE to
 261:Generated_Source\PSoC4/cyPm.c ****     * the RESET state. Note that waking up from STOP using XRES will be perceived
 262:Generated_Source\PSoC4/cyPm.c ****     * as a general RESET.
 263:Generated_Source\PSoC4/cyPm.c ****     *
 264:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_UNKN          Unknown reset reason.
 265:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_XRES          Transition from OFF/XRES to RESET
 266:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_HIB    Transition/wakeup from HIBERNATE to RESET
 267:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_STOP   Transition/wakeup from STOP to RESET
 268:Generated_Source\PSoC4/cyPm.c ****     *
 269:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 270:Generated_Source\PSoC4/cyPm.c ****     uint32 CySysPmGetResetReason(void)
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 8


 271:Generated_Source\PSoC4/cyPm.c ****     {
 272:Generated_Source\PSoC4/cyPm.c ****         uint32 reason = CY_PM_RESET_REASON_UNKN;
 273:Generated_Source\PSoC4/cyPm.c **** 
 274:Generated_Source\PSoC4/cyPm.c ****         switch(CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_TOKEN_MASK)
 275:Generated_Source\PSoC4/cyPm.c ****         {
 276:Generated_Source\PSoC4/cyPm.c ****         /* Power up, XRES */
 277:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_XRES:
 278:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_XRES;
 279:Generated_Source\PSoC4/cyPm.c ****             break;
 280:Generated_Source\PSoC4/cyPm.c **** 
 281:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Hibernate */
 282:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_HIB:
 283:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_HIB;
 284:Generated_Source\PSoC4/cyPm.c ****             break;
 285:Generated_Source\PSoC4/cyPm.c **** 
 286:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop (through WAKEUP pin assert) */
 287:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_STOP:
 288:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_STOP;
 289:Generated_Source\PSoC4/cyPm.c ****             break;
 290:Generated_Source\PSoC4/cyPm.c **** 
 291:Generated_Source\PSoC4/cyPm.c ****         /* Unknown reason */
 292:Generated_Source\PSoC4/cyPm.c ****         default:
 293:Generated_Source\PSoC4/cyPm.c ****             break;
 294:Generated_Source\PSoC4/cyPm.c ****         }
 295:Generated_Source\PSoC4/cyPm.c **** 
 296:Generated_Source\PSoC4/cyPm.c ****         return (reason);
 297:Generated_Source\PSoC4/cyPm.c ****     }
 298:Generated_Source\PSoC4/cyPm.c **** 
 299:Generated_Source\PSoC4/cyPm.c **** 
 300:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 301:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmFreezeIo
 302:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 303:Generated_Source\PSoC4/cyPm.c ****     *
 304:Generated_Source\PSoC4/cyPm.c ****     * Freezes IO-Cells directly to save the IO-Cell state on wake up from the
 305:Generated_Source\PSoC4/cyPm.c ****     * Hibernate or Stop state. It is not required to call this function before
 306:Generated_Source\PSoC4/cyPm.c ****     * entering the Stop mode, since \ref CySysPmStop() function freezes IO-Cells
 307:Generated_Source\PSoC4/cyPm.c ****     * implicitly.
 308:Generated_Source\PSoC4/cyPm.c ****     *
 309:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 310:Generated_Source\PSoC4/cyPm.c ****     *
 311:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 312:Generated_Source\PSoC4/cyPm.c ****     void CySysPmFreezeIo(void)
 313:Generated_Source\PSoC4/cyPm.c ****     {
 314:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 315:Generated_Source\PSoC4/cyPm.c **** 
 316:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 317:Generated_Source\PSoC4/cyPm.c **** 
 318:Generated_Source\PSoC4/cyPm.c ****         /* Check FREEZE state to avoid recurrent IO-Cells freeze attempt,
 319:Generated_Source\PSoC4/cyPm.c ****          * since the second call to this function will cause accidental switch
 320:Generated_Source\PSoC4/cyPm.c ****          * to the STOP mode (the system will enter STOP mode immediately after
 321:Generated_Source\PSoC4/cyPm.c ****          * writing to STOP bit since both UNLOCK and FREEZE have been set correctly
 322:Generated_Source\PSoC4/cyPm.c ****          * in a previous call to this function).
 323:Generated_Source\PSoC4/cyPm.c ****          */
 324:Generated_Source\PSoC4/cyPm.c ****         if (0u == (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_FREEZE))
 325:Generated_Source\PSoC4/cyPm.c ****         {
 326:Generated_Source\PSoC4/cyPm.c ****             /* Preserve last reset reason and disable overrides the next freeze command by peripher
 327:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_STOP | CY_PM_PWR_STOP_FREEZE | CY_PM_PWR_STOP_UNLOC
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 9


 328:Generated_Source\PSoC4/cyPm.c ****                                 (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_P
 329:Generated_Source\PSoC4/cyPm.c **** 
 330:Generated_Source\PSoC4/cyPm.c ****             /* If reading after writing, read this register three times to delay
 331:Generated_Source\PSoC4/cyPm.c ****             *  enough time for internal settling.
 332:Generated_Source\PSoC4/cyPm.c ****             */
 333:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 334:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 335:Generated_Source\PSoC4/cyPm.c **** 
 336:Generated_Source\PSoC4/cyPm.c ****             /* Second write causes the freeze of IO-Cells to save IO-Cell state */
 337:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG;
 338:Generated_Source\PSoC4/cyPm.c ****         }
 339:Generated_Source\PSoC4/cyPm.c **** 
 340:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 341:Generated_Source\PSoC4/cyPm.c ****     }
 342:Generated_Source\PSoC4/cyPm.c **** 
 343:Generated_Source\PSoC4/cyPm.c **** 
 344:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 345:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmUnfreezeIo
 346:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 347:Generated_Source\PSoC4/cyPm.c ****     *
 348:Generated_Source\PSoC4/cyPm.c ****     * The IO-Cells remain frozen after awake from Hibernate or Stop mode until
 349:Generated_Source\PSoC4/cyPm.c ****     * the firmware unfreezes them after booting. The call of this function
 350:Generated_Source\PSoC4/cyPm.c ****     * unfreezes IO-Cells explicitly.
 351:Generated_Source\PSoC4/cyPm.c ****     *
 352:Generated_Source\PSoC4/cyPm.c ****     * If the firmware intent is to retain the data value on the port, then the
 353:Generated_Source\PSoC4/cyPm.c ****     * value must be read and re-written to the data register before calling this
 354:Generated_Source\PSoC4/cyPm.c ****     * API. Furthermore, the drive mode must be re-programmed.  If this is not done,
 355:Generated_Source\PSoC4/cyPm.c ****     * the pin state will change to default state the moment the freeze is removed.
 356:Generated_Source\PSoC4/cyPm.c ****     *
 357:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 358:Generated_Source\PSoC4/cyPm.c ****     *
 359:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 360:Generated_Source\PSoC4/cyPm.c ****     void CySysPmUnfreezeIo(void)
 361:Generated_Source\PSoC4/cyPm.c ****     {
 362:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 363:Generated_Source\PSoC4/cyPm.c **** 
 364:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 365:Generated_Source\PSoC4/cyPm.c **** 
 366:Generated_Source\PSoC4/cyPm.c ****         /* Preserve last reset reason and wakeup polarity. Then, unfreeze I/O:
 367:Generated_Source\PSoC4/cyPm.c ****          * write PWR_STOP.FREEZE=0, .UNLOCK=0x3A, .STOP=0, .TOKEN
 368:Generated_Source\PSoC4/cyPm.c ****          */
 369:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_UNLOCK |
 370:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLAR
 371:Generated_Source\PSoC4/cyPm.c **** 
 372:Generated_Source\PSoC4/cyPm.c ****         /* If reading after writing, read this register three times to delay
 373:Generated_Source\PSoC4/cyPm.c ****         *  enough time for internal settling.
 374:Generated_Source\PSoC4/cyPm.c ****         */
 375:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 376:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 377:Generated_Source\PSoC4/cyPm.c **** 
 378:Generated_Source\PSoC4/cyPm.c ****         /* Lock STOP mode: write PWR_STOP.FREEZE=0, UNLOCK=0x00, STOP=0, .TOKEN */
 379:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG &= (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLARITY);
 380:Generated_Source\PSoC4/cyPm.c **** 
 381:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 382:Generated_Source\PSoC4/cyPm.c ****     }
 383:Generated_Source\PSoC4/cyPm.c **** 
 384:Generated_Source\PSoC4/cyPm.c **** #else
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 10


 385:Generated_Source\PSoC4/cyPm.c **** 
 386:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 387:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupHoldoff
 388:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 389:Generated_Source\PSoC4/cyPm.c ****     *
 390:Generated_Source\PSoC4/cyPm.c ****     * Sets the Deep Sleep wakeup time by scaling the hold-off to the HFCLK
 391:Generated_Source\PSoC4/cyPm.c ****     * frequency.
 392:Generated_Source\PSoC4/cyPm.c ****     *
 393:Generated_Source\PSoC4/cyPm.c ****     * This function must be called before increasing HFCLK clock frequency. It can
 394:Generated_Source\PSoC4/cyPm.c ****     * optionally be called after lowering HFCLK clock frequency in order to improve
 395:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time.
 396:Generated_Source\PSoC4/cyPm.c ****     *
 397:Generated_Source\PSoC4/cyPm.c ****     * It is functionally acceptable to leave the default hold-off setting, but
 398:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time may exceed the specification.
 399:Generated_Source\PSoC4/cyPm.c ****     *
 400:Generated_Source\PSoC4/cyPm.c ****     * This function is applicable only for the 4000 device family.
 401:Generated_Source\PSoC4/cyPm.c ****     *
 402:Generated_Source\PSoC4/cyPm.c ****     * \param hfclkFrequencyMhz The HFCLK frequency in MHz.
 403:Generated_Source\PSoC4/cyPm.c ****     *
 404:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 405:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupHoldoff(uint32 hfclkFrequencyMhz)
 406:Generated_Source\PSoC4/cyPm.c ****     {
 129              		.loc 1 406 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134              	.LVL4:
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 408:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_KEY_DELAY_FREQ_DEFAULT) * hfclkFrequencyMhz) >> 16u) + 1u;
 135              		.loc 1 408 0
 136 0000 034B     		ldr	r3, .L8
 409:Generated_Source\PSoC4/cyPm.c ****     }
 137              		.loc 1 409 0
 138              		@ sp needed
 408:Generated_Source\PSoC4/cyPm.c ****     }
 139              		.loc 1 408 0
 140 0002 5843     		muls	r0, r3
 141              	.LVL5:
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 142              		.loc 1 407 0
 143 0004 034B     		ldr	r3, .L8+4
 408:Generated_Source\PSoC4/cyPm.c ****     }
 144              		.loc 1 408 0
 145 0006 000C     		lsrs	r0, r0, #16
 146 0008 0130     		adds	r0, r0, #1
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 147              		.loc 1 407 0
 148 000a 1860     		str	r0, [r3]
 149              		.loc 1 409 0
 150 000c 7047     		bx	lr
 151              	.L9:
 152 000e C046     		.align	2
 153              	.L8:
 154 0010 AA2A0500 		.word	338602
 155 0014 04000340 		.word	1073938436
 156              		.cfi_endproc
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 11


 157              	.LFE3:
 158              		.size	CySysPmSetWakeupHoldoff, .-CySysPmSetWakeupHoldoff
 159              		.text
 160              	.Letext0:
 161              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 162              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 163              		.section	.debug_info,"",%progbits
 164              	.Ldebug_info0:
 165 0000 7C010000 		.4byte	0x17c
 166 0004 0400     		.2byte	0x4
 167 0006 00000000 		.4byte	.Ldebug_abbrev0
 168 000a 04       		.byte	0x4
 169 000b 01       		.uleb128 0x1
 170 000c 80000000 		.4byte	.LASF25
 171 0010 0C       		.byte	0xc
 172 0011 33000000 		.4byte	.LASF26
 173 0015 63010000 		.4byte	.LASF27
 174 0019 00000000 		.4byte	.Ldebug_ranges0+0
 175 001d 00000000 		.4byte	0
 176 0021 00000000 		.4byte	.Ldebug_line0
 177 0025 02       		.uleb128 0x2
 178 0026 01       		.byte	0x1
 179 0027 06       		.byte	0x6
 180 0028 E0010000 		.4byte	.LASF0
 181 002c 02       		.uleb128 0x2
 182 002d 01       		.byte	0x1
 183 002e 08       		.byte	0x8
 184 002f 47010000 		.4byte	.LASF1
 185 0033 02       		.uleb128 0x2
 186 0034 02       		.byte	0x2
 187 0035 05       		.byte	0x5
 188 0036 1B020000 		.4byte	.LASF2
 189 003a 02       		.uleb128 0x2
 190 003b 02       		.byte	0x2
 191 003c 07       		.byte	0x7
 192 003d CD010000 		.4byte	.LASF3
 193 0041 02       		.uleb128 0x2
 194 0042 04       		.byte	0x4
 195 0043 05       		.byte	0x5
 196 0044 5A010000 		.4byte	.LASF4
 197 0048 02       		.uleb128 0x2
 198 0049 04       		.byte	0x4
 199 004a 07       		.byte	0x7
 200 004b 18010000 		.4byte	.LASF5
 201 004f 02       		.uleb128 0x2
 202 0050 08       		.byte	0x8
 203 0051 05       		.byte	0x5
 204 0052 00000000 		.4byte	.LASF6
 205 0056 02       		.uleb128 0x2
 206 0057 08       		.byte	0x8
 207 0058 07       		.byte	0x7
 208 0059 2A010000 		.4byte	.LASF7
 209 005d 03       		.uleb128 0x3
 210 005e 04       		.byte	0x4
 211 005f 05       		.byte	0x5
 212 0060 696E7400 		.ascii	"int\000"
 213 0064 02       		.uleb128 0x2
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 12


 214 0065 04       		.byte	0x4
 215 0066 07       		.byte	0x7
 216 0067 15000000 		.4byte	.LASF8
 217 006b 04       		.uleb128 0x4
 218 006c 12010000 		.4byte	.LASF9
 219 0070 02       		.byte	0x2
 220 0071 D201     		.2byte	0x1d2
 221 0073 2C000000 		.4byte	0x2c
 222 0077 04       		.uleb128 0x4
 223 0078 25020000 		.4byte	.LASF10
 224 007c 02       		.byte	0x2
 225 007d D301     		.2byte	0x1d3
 226 007f 3A000000 		.4byte	0x3a
 227 0083 04       		.uleb128 0x4
 228 0084 0E000000 		.4byte	.LASF11
 229 0088 02       		.byte	0x2
 230 0089 D401     		.2byte	0x1d4
 231 008b 48000000 		.4byte	0x48
 232 008f 02       		.uleb128 0x2
 233 0090 04       		.byte	0x4
 234 0091 04       		.byte	0x4
 235 0092 41010000 		.4byte	.LASF12
 236 0096 02       		.uleb128 0x2
 237 0097 08       		.byte	0x8
 238 0098 04       		.byte	0x4
 239 0099 AE010000 		.4byte	.LASF13
 240 009d 02       		.uleb128 0x2
 241 009e 01       		.byte	0x1
 242 009f 08       		.byte	0x8
 243 00a0 55010000 		.4byte	.LASF14
 244 00a4 04       		.uleb128 0x4
 245 00a5 A8010000 		.4byte	.LASF15
 246 00a9 02       		.byte	0x2
 247 00aa 7D02     		.2byte	0x27d
 248 00ac B0000000 		.4byte	0xb0
 249 00b0 05       		.uleb128 0x5
 250 00b1 77000000 		.4byte	0x77
 251 00b5 04       		.uleb128 0x4
 252 00b6 C7010000 		.4byte	.LASF16
 253 00ba 02       		.byte	0x2
 254 00bb 7E02     		.2byte	0x27e
 255 00bd C1000000 		.4byte	0xc1
 256 00c1 05       		.uleb128 0x5
 257 00c2 83000000 		.4byte	0x83
 258 00c6 02       		.uleb128 0x2
 259 00c7 08       		.byte	0x8
 260 00c8 04       		.byte	0x4
 261 00c9 0F020000 		.4byte	.LASF17
 262 00cd 02       		.uleb128 0x2
 263 00ce 04       		.byte	0x4
 264 00cf 07       		.byte	0x7
 265 00d0 2C020000 		.4byte	.LASF18
 266 00d4 06       		.uleb128 0x6
 267 00d5 EC010000 		.4byte	.LASF19
 268 00d9 01       		.byte	0x1
 269 00da 20       		.byte	0x20
 270 00db 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 13


 271 00df 1C000000 		.4byte	.LFE1-.LFB1
 272 00e3 01       		.uleb128 0x1
 273 00e4 9C       		.byte	0x9c
 274 00e5 0B010000 		.4byte	0x10b
 275 00e9 07       		.uleb128 0x7
 276 00ea 35020000 		.4byte	.LASF21
 277 00ee 01       		.byte	0x1
 278 00ef 22       		.byte	0x22
 279 00f0 6B000000 		.4byte	0x6b
 280 00f4 00000000 		.4byte	.LLST0
 281 00f8 08       		.uleb128 0x8
 282 00f9 06000000 		.4byte	.LVL0
 283 00fd 69010000 		.4byte	0x169
 284 0101 08       		.uleb128 0x8
 285 0102 16000000 		.4byte	.LVL1
 286 0106 74010000 		.4byte	0x174
 287 010a 00       		.byte	0
 288 010b 06       		.uleb128 0x6
 289 010c 22000000 		.4byte	.LASF20
 290 0110 01       		.byte	0x1
 291 0111 3F       		.byte	0x3f
 292 0112 00000000 		.4byte	.LFB2
 293 0116 30000000 		.4byte	.LFE2-.LFB2
 294 011a 01       		.uleb128 0x1
 295 011b 9C       		.byte	0x9c
 296 011c 42010000 		.4byte	0x142
 297 0120 07       		.uleb128 0x7
 298 0121 35020000 		.4byte	.LASF21
 299 0125 01       		.byte	0x1
 300 0126 41       		.byte	0x41
 301 0127 6B000000 		.4byte	0x6b
 302 012b 13000000 		.4byte	.LLST1
 303 012f 08       		.uleb128 0x8
 304 0130 06000000 		.4byte	.LVL2
 305 0134 69010000 		.4byte	0x169
 306 0138 08       		.uleb128 0x8
 307 0139 20000000 		.4byte	.LVL3
 308 013d 74010000 		.4byte	0x174
 309 0141 00       		.byte	0
 310 0142 09       		.uleb128 0x9
 311 0143 68000000 		.4byte	.LASF22
 312 0147 01       		.byte	0x1
 313 0148 9501     		.2byte	0x195
 314 014a 00000000 		.4byte	.LFB3
 315 014e 18000000 		.4byte	.LFE3-.LFB3
 316 0152 01       		.uleb128 0x1
 317 0153 9C       		.byte	0x9c
 318 0154 69010000 		.4byte	0x169
 319 0158 0A       		.uleb128 0xa
 320 0159 B5010000 		.4byte	.LASF28
 321 015d 01       		.byte	0x1
 322 015e 9501     		.2byte	0x195
 323 0160 83000000 		.4byte	0x83
 324 0164 26000000 		.4byte	.LLST2
 325 0168 00       		.byte	0
 326 0169 0B       		.uleb128 0xb
 327 016a 51000000 		.4byte	.LASF23
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 14


 328 016e 51000000 		.4byte	.LASF23
 329 0172 03       		.byte	0x3
 330 0173 E5       		.byte	0xe5
 331 0174 0B       		.uleb128 0xb
 332 0175 F9010000 		.4byte	.LASF24
 333 0179 F9010000 		.4byte	.LASF24
 334 017d 03       		.byte	0x3
 335 017e E6       		.byte	0xe6
 336 017f 00       		.byte	0
 337              		.section	.debug_abbrev,"",%progbits
 338              	.Ldebug_abbrev0:
 339 0000 01       		.uleb128 0x1
 340 0001 11       		.uleb128 0x11
 341 0002 01       		.byte	0x1
 342 0003 25       		.uleb128 0x25
 343 0004 0E       		.uleb128 0xe
 344 0005 13       		.uleb128 0x13
 345 0006 0B       		.uleb128 0xb
 346 0007 03       		.uleb128 0x3
 347 0008 0E       		.uleb128 0xe
 348 0009 1B       		.uleb128 0x1b
 349 000a 0E       		.uleb128 0xe
 350 000b 55       		.uleb128 0x55
 351 000c 17       		.uleb128 0x17
 352 000d 11       		.uleb128 0x11
 353 000e 01       		.uleb128 0x1
 354 000f 10       		.uleb128 0x10
 355 0010 17       		.uleb128 0x17
 356 0011 00       		.byte	0
 357 0012 00       		.byte	0
 358 0013 02       		.uleb128 0x2
 359 0014 24       		.uleb128 0x24
 360 0015 00       		.byte	0
 361 0016 0B       		.uleb128 0xb
 362 0017 0B       		.uleb128 0xb
 363 0018 3E       		.uleb128 0x3e
 364 0019 0B       		.uleb128 0xb
 365 001a 03       		.uleb128 0x3
 366 001b 0E       		.uleb128 0xe
 367 001c 00       		.byte	0
 368 001d 00       		.byte	0
 369 001e 03       		.uleb128 0x3
 370 001f 24       		.uleb128 0x24
 371 0020 00       		.byte	0
 372 0021 0B       		.uleb128 0xb
 373 0022 0B       		.uleb128 0xb
 374 0023 3E       		.uleb128 0x3e
 375 0024 0B       		.uleb128 0xb
 376 0025 03       		.uleb128 0x3
 377 0026 08       		.uleb128 0x8
 378 0027 00       		.byte	0
 379 0028 00       		.byte	0
 380 0029 04       		.uleb128 0x4
 381 002a 16       		.uleb128 0x16
 382 002b 00       		.byte	0
 383 002c 03       		.uleb128 0x3
 384 002d 0E       		.uleb128 0xe
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 15


 385 002e 3A       		.uleb128 0x3a
 386 002f 0B       		.uleb128 0xb
 387 0030 3B       		.uleb128 0x3b
 388 0031 05       		.uleb128 0x5
 389 0032 49       		.uleb128 0x49
 390 0033 13       		.uleb128 0x13
 391 0034 00       		.byte	0
 392 0035 00       		.byte	0
 393 0036 05       		.uleb128 0x5
 394 0037 35       		.uleb128 0x35
 395 0038 00       		.byte	0
 396 0039 49       		.uleb128 0x49
 397 003a 13       		.uleb128 0x13
 398 003b 00       		.byte	0
 399 003c 00       		.byte	0
 400 003d 06       		.uleb128 0x6
 401 003e 2E       		.uleb128 0x2e
 402 003f 01       		.byte	0x1
 403 0040 3F       		.uleb128 0x3f
 404 0041 19       		.uleb128 0x19
 405 0042 03       		.uleb128 0x3
 406 0043 0E       		.uleb128 0xe
 407 0044 3A       		.uleb128 0x3a
 408 0045 0B       		.uleb128 0xb
 409 0046 3B       		.uleb128 0x3b
 410 0047 0B       		.uleb128 0xb
 411 0048 27       		.uleb128 0x27
 412 0049 19       		.uleb128 0x19
 413 004a 11       		.uleb128 0x11
 414 004b 01       		.uleb128 0x1
 415 004c 12       		.uleb128 0x12
 416 004d 06       		.uleb128 0x6
 417 004e 40       		.uleb128 0x40
 418 004f 18       		.uleb128 0x18
 419 0050 9742     		.uleb128 0x2117
 420 0052 19       		.uleb128 0x19
 421 0053 01       		.uleb128 0x1
 422 0054 13       		.uleb128 0x13
 423 0055 00       		.byte	0
 424 0056 00       		.byte	0
 425 0057 07       		.uleb128 0x7
 426 0058 34       		.uleb128 0x34
 427 0059 00       		.byte	0
 428 005a 03       		.uleb128 0x3
 429 005b 0E       		.uleb128 0xe
 430 005c 3A       		.uleb128 0x3a
 431 005d 0B       		.uleb128 0xb
 432 005e 3B       		.uleb128 0x3b
 433 005f 0B       		.uleb128 0xb
 434 0060 49       		.uleb128 0x49
 435 0061 13       		.uleb128 0x13
 436 0062 02       		.uleb128 0x2
 437 0063 17       		.uleb128 0x17
 438 0064 00       		.byte	0
 439 0065 00       		.byte	0
 440 0066 08       		.uleb128 0x8
 441 0067 898201   		.uleb128 0x4109
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 16


 442 006a 00       		.byte	0
 443 006b 11       		.uleb128 0x11
 444 006c 01       		.uleb128 0x1
 445 006d 31       		.uleb128 0x31
 446 006e 13       		.uleb128 0x13
 447 006f 00       		.byte	0
 448 0070 00       		.byte	0
 449 0071 09       		.uleb128 0x9
 450 0072 2E       		.uleb128 0x2e
 451 0073 01       		.byte	0x1
 452 0074 3F       		.uleb128 0x3f
 453 0075 19       		.uleb128 0x19
 454 0076 03       		.uleb128 0x3
 455 0077 0E       		.uleb128 0xe
 456 0078 3A       		.uleb128 0x3a
 457 0079 0B       		.uleb128 0xb
 458 007a 3B       		.uleb128 0x3b
 459 007b 05       		.uleb128 0x5
 460 007c 27       		.uleb128 0x27
 461 007d 19       		.uleb128 0x19
 462 007e 11       		.uleb128 0x11
 463 007f 01       		.uleb128 0x1
 464 0080 12       		.uleb128 0x12
 465 0081 06       		.uleb128 0x6
 466 0082 40       		.uleb128 0x40
 467 0083 18       		.uleb128 0x18
 468 0084 9742     		.uleb128 0x2117
 469 0086 19       		.uleb128 0x19
 470 0087 01       		.uleb128 0x1
 471 0088 13       		.uleb128 0x13
 472 0089 00       		.byte	0
 473 008a 00       		.byte	0
 474 008b 0A       		.uleb128 0xa
 475 008c 05       		.uleb128 0x5
 476 008d 00       		.byte	0
 477 008e 03       		.uleb128 0x3
 478 008f 0E       		.uleb128 0xe
 479 0090 3A       		.uleb128 0x3a
 480 0091 0B       		.uleb128 0xb
 481 0092 3B       		.uleb128 0x3b
 482 0093 05       		.uleb128 0x5
 483 0094 49       		.uleb128 0x49
 484 0095 13       		.uleb128 0x13
 485 0096 02       		.uleb128 0x2
 486 0097 17       		.uleb128 0x17
 487 0098 00       		.byte	0
 488 0099 00       		.byte	0
 489 009a 0B       		.uleb128 0xb
 490 009b 2E       		.uleb128 0x2e
 491 009c 00       		.byte	0
 492 009d 3F       		.uleb128 0x3f
 493 009e 19       		.uleb128 0x19
 494 009f 3C       		.uleb128 0x3c
 495 00a0 19       		.uleb128 0x19
 496 00a1 6E       		.uleb128 0x6e
 497 00a2 0E       		.uleb128 0xe
 498 00a3 03       		.uleb128 0x3
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 17


 499 00a4 0E       		.uleb128 0xe
 500 00a5 3A       		.uleb128 0x3a
 501 00a6 0B       		.uleb128 0xb
 502 00a7 3B       		.uleb128 0x3b
 503 00a8 0B       		.uleb128 0xb
 504 00a9 00       		.byte	0
 505 00aa 00       		.byte	0
 506 00ab 00       		.byte	0
 507              		.section	.debug_loc,"",%progbits
 508              	.Ldebug_loc0:
 509              	.LLST0:
 510 0000 06000000 		.4byte	.LVL0
 511 0004 15000000 		.4byte	.LVL1-1
 512 0008 0100     		.2byte	0x1
 513 000a 50       		.byte	0x50
 514 000b 00000000 		.4byte	0
 515 000f 00000000 		.4byte	0
 516              	.LLST1:
 517 0013 06000000 		.4byte	.LVL2
 518 0017 1F000000 		.4byte	.LVL3-1
 519 001b 0100     		.2byte	0x1
 520 001d 50       		.byte	0x50
 521 001e 00000000 		.4byte	0
 522 0022 00000000 		.4byte	0
 523              	.LLST2:
 524 0026 00000000 		.4byte	.LVL4
 525 002a 04000000 		.4byte	.LVL5
 526 002e 0100     		.2byte	0x1
 527 0030 50       		.byte	0x50
 528 0031 04000000 		.4byte	.LVL5
 529 0035 18000000 		.4byte	.LFE3
 530 0039 0400     		.2byte	0x4
 531 003b F3       		.byte	0xf3
 532 003c 01       		.uleb128 0x1
 533 003d 50       		.byte	0x50
 534 003e 9F       		.byte	0x9f
 535 003f 00000000 		.4byte	0
 536 0043 00000000 		.4byte	0
 537              		.section	.debug_aranges,"",%progbits
 538 0000 2C000000 		.4byte	0x2c
 539 0004 0200     		.2byte	0x2
 540 0006 00000000 		.4byte	.Ldebug_info0
 541 000a 04       		.byte	0x4
 542 000b 00       		.byte	0
 543 000c 0000     		.2byte	0
 544 000e 0000     		.2byte	0
 545 0010 00000000 		.4byte	.LFB1
 546 0014 1C000000 		.4byte	.LFE1-.LFB1
 547 0018 00000000 		.4byte	.LFB2
 548 001c 30000000 		.4byte	.LFE2-.LFB2
 549 0020 00000000 		.4byte	.LFB3
 550 0024 18000000 		.4byte	.LFE3-.LFB3
 551 0028 00000000 		.4byte	0
 552 002c 00000000 		.4byte	0
 553              		.section	.debug_ranges,"",%progbits
 554              	.Ldebug_ranges0:
 555 0000 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 18


 556 0004 1C000000 		.4byte	.LFE1
 557 0008 00000000 		.4byte	.LFB2
 558 000c 30000000 		.4byte	.LFE2
 559 0010 00000000 		.4byte	.LFB3
 560 0014 18000000 		.4byte	.LFE3
 561 0018 00000000 		.4byte	0
 562 001c 00000000 		.4byte	0
 563              		.section	.debug_line,"",%progbits
 564              	.Ldebug_line0:
 565 0000 99000000 		.section	.debug_str,"MS",%progbits,1
 565      02004C00 
 565      00000201 
 565      FB0E0D00 
 565      01010101 
 566              	.LASF6:
 567 0000 6C6F6E67 		.ascii	"long long int\000"
 567      206C6F6E 
 567      6720696E 
 567      7400
 568              	.LASF11:
 569 000e 75696E74 		.ascii	"uint32\000"
 569      333200
 570              	.LASF8:
 571 0015 756E7369 		.ascii	"unsigned int\000"
 571      676E6564 
 571      20696E74 
 571      00
 572              	.LASF20:
 573 0022 43795379 		.ascii	"CySysPmDeepSleep\000"
 573      73506D44 
 573      65657053 
 573      6C656570 
 573      00
 574              	.LASF26:
 575 0033 47656E65 		.ascii	"Generated_Source\\PSoC4\\cyPm.c\000"
 575      72617465 
 575      645F536F 
 575      75726365 
 575      5C50536F 
 576              	.LASF23:
 577 0051 4379456E 		.ascii	"CyEnterCriticalSection\000"
 577      74657243 
 577      72697469 
 577      63616C53 
 577      65637469 
 578              	.LASF22:
 579 0068 43795379 		.ascii	"CySysPmSetWakeupHoldoff\000"
 579      73506D53 
 579      65745761 
 579      6B657570 
 579      486F6C64 
 580              	.LASF25:
 581 0080 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 581      43313120 
 581      352E342E 
 581      31203230 
 581      31363036 
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 19


 582 00b3 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 582      20726576 
 582      6973696F 
 582      6E203233 
 582      37373135 
 583 00e6 67202D4F 		.ascii	"g -Os -ffunction-sections -ffat-lto-objects\000"
 583      73202D66 
 583      66756E63 
 583      74696F6E 
 583      2D736563 
 584              	.LASF9:
 585 0112 75696E74 		.ascii	"uint8\000"
 585      3800
 586              	.LASF5:
 587 0118 6C6F6E67 		.ascii	"long unsigned int\000"
 587      20756E73 
 587      69676E65 
 587      6420696E 
 587      7400
 588              	.LASF7:
 589 012a 6C6F6E67 		.ascii	"long long unsigned int\000"
 589      206C6F6E 
 589      6720756E 
 589      7369676E 
 589      65642069 
 590              	.LASF12:
 591 0141 666C6F61 		.ascii	"float\000"
 591      7400
 592              	.LASF1:
 593 0147 756E7369 		.ascii	"unsigned char\000"
 593      676E6564 
 593      20636861 
 593      7200
 594              	.LASF14:
 595 0155 63686172 		.ascii	"char\000"
 595      00
 596              	.LASF4:
 597 015a 6C6F6E67 		.ascii	"long int\000"
 597      20696E74 
 597      00
 598              	.LASF27:
 599 0163 433A5C55 		.ascii	"C:\\Users\\Stephen\\Documents\\Firmware\\PSoC\\Boot"
 599      73657273 
 599      5C537465 
 599      7068656E 
 599      5C446F63 
 600 0190 6C6F6164 		.ascii	"loader\\Bootloader.cydsn\000"
 600      65725C42 
 600      6F6F746C 
 600      6F616465 
 600      722E6379 
 601              	.LASF15:
 602 01a8 72656731 		.ascii	"reg16\000"
 602      3600
 603              	.LASF13:
 604 01ae 646F7562 		.ascii	"double\000"
 604      6C6500
ARM GAS  C:\Users\Stephen\AppData\Local\Temp\cc2fABq3.s 			page 20


 605              	.LASF28:
 606 01b5 6866636C 		.ascii	"hfclkFrequencyMhz\000"
 606      6B467265 
 606      7175656E 
 606      63794D68 
 606      7A00
 607              	.LASF16:
 608 01c7 72656733 		.ascii	"reg32\000"
 608      3200
 609              	.LASF3:
 610 01cd 73686F72 		.ascii	"short unsigned int\000"
 610      7420756E 
 610      7369676E 
 610      65642069 
 610      6E7400
 611              	.LASF0:
 612 01e0 7369676E 		.ascii	"signed char\000"
 612      65642063 
 612      68617200 
 613              	.LASF19:
 614 01ec 43795379 		.ascii	"CySysPmSleep\000"
 614      73506D53 
 614      6C656570 
 614      00
 615              	.LASF24:
 616 01f9 43794578 		.ascii	"CyExitCriticalSection\000"
 616      69744372 
 616      69746963 
 616      616C5365 
 616      6374696F 
 617              	.LASF17:
 618 020f 6C6F6E67 		.ascii	"long double\000"
 618      20646F75 
 618      626C6500 
 619              	.LASF2:
 620 021b 73686F72 		.ascii	"short int\000"
 620      7420696E 
 620      7400
 621              	.LASF10:
 622 0225 75696E74 		.ascii	"uint16\000"
 622      313600
 623              	.LASF18:
 624 022c 73697A65 		.ascii	"sizetype\000"
 624      74797065 
 624      00
 625              	.LASF21:
 626 0235 696E7465 		.ascii	"interruptState\000"
 626      72727570 
 626      74537461 
 626      746500
 627              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
